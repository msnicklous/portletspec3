package javax.portlet.annotations;


import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.*;


/**
 * <div class='container-change'>
 * Declares resources needed by one or more portlets in a portlet application. 
 * The resources may be provided by the portlet for inclusion into the header section
 * through the <code>GenericPortlet#doHeaders</code> method 
 * or may represent dependencies on external resources.
 * <p>
 * The annotated method must have one of the following signatures:
 * <ul>
 * <li>
 * <code>public void &lt;methodName&gt;(RenderRequest, RenderResponse)</code>
 * <p>
 * This corresponds to the <code>doHeaders</code> method. Output written through the
 * render response object will be placed in the document <code>&lt;head&gt;</code> section.
 * </li>   
 * <li>
 * <code>String &lt;methodName&gt;()</code>
 * <p>
 * The String returned by the method will be placed 
 * in the document <code>&lt;head&gt;</code> section.
 * </li>   
 * </ul> 
 * <p> 
 * The method name can be freely selected.
 * <p>
 * The method declaration may contain a throws clause. Exceptions declared in the 
 * throws clause should be of type {@link javax.portlet.PortletException} or
 * {@link java.io.IOException}. 
 * Checked exceptions of any other type will be caught, wrapped with a PortletException, 
 * and rethrown.
 * <p>
 * This annotation may be applied to a type or to a method. 
 * If applied to a type, it behaves as though it were applied to an empty 
 * <code>doHeaders</code> method.  
 * </div>
 *    
 * @see javax.portlet.GenericPortlet#doHeaders(javax.portlet.RenderRequest, javax.portlet.RenderResponse) doHeaders
 */

@Retention(RUNTIME) @Target({METHOD})
public @interface PortletResources {
   
   /**
    * <div class='container-change'>
    * The portlet names for which the resources apply.
    * <p>
    * The annotated method can apply to multiple portlets within the portlet
    * application. The names of the portlets to which the resources apply must be 
    * specified in this field.
    * <p>
    * A wildcard character '*' can be specified in the first portletName array element 
    * to indicate that the resource declarations are to apply to all portlets in 
    * the portlet application.
    * If specified, the wildcard character must appear alone in the first array element.
    * </div>
    * 
    * @return     The portlet names
    */
   String[]   portletNames();
   
   /**
    * <div class='container-change'>
    * Sets the content type, or the MIME type, of content generated by the method.
    * The content type will be set before the annotated method body is executed.
    * <p>
    * If this field is empty, no content type will be set.
    * The portlet can then set the content type using the portlet API
    * <code>RenderResponse#setContentType</code> method.
    * </div>
    * 
    * @see        javax.portlet.RenderResponse#setContentType(String) RenderResponse#setContentType
    * 
    * @return     The content type
    */
   String   contentType() default "text/html";
   
   /**
    * <div class='container-change'>
    * Specifies a resource, such as a JSP, an HTML file, or a servlet, to be included.
    * <p>
    * The resource will be included using the 
    * <code>PortletRequestDispatcher#include</code> method after the method body 
    * has been executed.
    * <p>
    * If this field is empty, no resource will be included.
    * </div>
    * 
    * @see        javax.portlet.PortletRequestDispatcher
    * @see        javax.portlet.PortletRequestDispatcher#include(javax.portlet.PortletRequest, javax.portlet.PortletResponse) PortletRequestDispatcher#include
    * 
    * @return     The resource to be included
    */
   String   include() default "";
   
   /**
    * <div class='container-change'>
    * The dependencies the portlet may have on external resources.
    * The resources can represent client-side prerequisites such as JavaScript libraries
    * or stylesheet resources that are shared among portlets.
    * </div>
    * 
    * @return     The dependencies
    */
   Dependency[]      dependencies() default {};
   
   /**
    * <div class='container-change'>
    * The ordinal number for this annotated method.
    * <p>
    * The ordinal number determines the order of execution if multiple methods
    * are annotated.
    * Annotated methods with a lower ordinal number are executed before methods with
    * a higher ordinal number.
    * </div>
    * 
    * @return     The ordinal number
    */
   int        ordinal() default 0;
}
